#file cloud clientimport socket,time,sys,os,re,hashlib,datetime,shutil,threadfrom PIL import ImageFile#Network variablesglobal ss=socket.socket()host="192.168.0.199"#host="127.0.0.1"port=29888global user_nameglobal data_bank,d_finish,s_mesdef threaded_download(x):#x is the filename    global data_bank,d_finish    d_finish=0    f=file(x,"wb")        while True:#stop will signify that it is finished        try:            if data_bank[0] == "stop":                break            else:                f.write(data_bank[0])                data_bank.remove(data_bank[0])        except Exception as e:#data may not be there yet            time.sleep(0.1)    f.close()    d_finish=1                  def directory_threaded_download(x):#x is the filename    global data_bank,d_finish    d_finish=0    f=file(x,"wb")        while True:#stop will signify that it is finished        try:            if data_bank[0] == "!@File end@!":                break            else:                f.write(data_bank[0])                data_bank.remove(data_bank[0])        except Exception as e:#data may not be there yet            time.sleep(0.1)    f.close()    d_finish=1                    def user_input():#function where the user inputs the commands they want    global s,user_name,data_bank,d_finish,s_mes    print "\n" + "-"*80    print "\nContents: This command will display the contents of the directory on the cloud"    print "\nDownload: This command will allow you to download a file that is located on the cloud"    print "\nUpload: This command will allow you to upload a file to the cloud"    print "\nDownload_Directory: This command will allow you to download a directory from the cloud"     print "\nUpload_Directory: This command will allow you to upload a directory to the cloud"    print "\nDelete: This command will allow you to delete a file on the cloud"    print "\nChange_Message: This command is only available to an admin. It enables changing of the server message"     print "\nUpdate_File_Cloud: This command is only available to an admin. It enables updating of the primary copy"    print "\nExit: This command will eliminate the connection with the cloud and close the application\n"    print "\n" + "-"*80 + "\n"    print "Server message: %s\n"% s_mes    print "-"*80 + "\n"    if uptime_approval != "DECLINED":# it sends DECLINED if the user isnt an admin        print "Server uptime: %s\n"% server_uptime        print "-"*80 + "\n"    print "Last login: %s\n"% last_login    print "-"*80 + "\n"    command="NONE"#Initial command initalisation for the first if statement    while True:        if command == "":            command=raw_input("-> ")        else:            command=raw_input("Contents,  download,  upload,  download_directory,  upload_directory,  delete,  change_message,  update_file_cloud, help or exit:\n")        command=command.lower()        if command == "help":            print "\n" + "-"*80            print "\nContents: This command will display the contents of the directory on the cloud"            print "\nDownload: This command will allow you to download a file that is located on the cloud"            print "\nUpload: This command will allow you to upload a file to the cloud"            print "\nDownload_Directory: This command will allow you to download a directory from the cloud"             print "\nUpload_Directory: This command will allow you to upload a directory to the cloud"            print "\nDelete: This command will allow you to delete a file on the cloud"            print "\nChange_Message: This command is only available to an admin. It enables changing of the server message"             print "\nUpdate_File_Cloud: This command is only available to an admin. It enables updating of the primary copy"            print "\nExit: This command will eliminate the connection with the cloud and close the application\n"            print "\n" + "-"*80 + "\n"                            if command == "change_message":            s.send("change_message")            time.sleep(0.3)                       confirmation=s.recv(1024)            if confirmation == "Success":                print "Login, succeeded!"                s_mes=raw_input("Enter the new server message: ")                s.send(s_mes)                print "\nSuccessfully changed server message!!\n"            else:                print "\nSorry, you arent an admin!\n"        if command == "update_file_cloud":            s.send("update_file_cloud")            time.sleep(0.3)            confirmation=s.recv(1024)            if confirmation == "Success":                print "\nLogin, succeeded!\n"                s.send("Windows")                status=s.recv(1024)#if server is ready                print "Updating client........."                if status == "yes":                    f=open("file_cloud_client.py","rb")                    while True:                        data=f.read(1024)                        if data == "":                            time.sleep(0.3)                            s.send("stop")                            break                        s.send(data)                        time.sleep(0.1)                    print "\nSuccessfully uploaded new file cloud client!\n"                else:                    print "\nServer error occurred, can't update!\n"            else:                print "\n Sorry, you aren't an admin!\n"                                                        if command == "contents":            #there is a bug here that treats a file called test,123 as two different files            print "Please wait......"            print "Obtaining directory contents\n"            print "-" * 80            s.send("contents")            contents=s.recv(9000)            string=""            a=0            d_call=0            f_call=0            for x in contents:                if x == "]":                    string=string.replace(",","")                    string=string.replace("'","")                    if "." not in string and d_call != 1:                        print "--DIRECTORIES--\n\n"                        d_call=1                    if "." in string and f_call == 0:                        print "\n\n--FILES--\n\n"                        f_call=1                    print "->" + string + "\n"                                if x == ",":# the whole string is "adsada,asdadsa"                    string=string.replace(",","")                    string=string.replace("'","")                    if "." not in string and d_call == 0:                        print "--DIRECTORIES--\n\n"                        d_call=1                    if "." in string and f_call == 0:                        print "\n\n--FILES--\n\n"                        f_call=1                    print "->" + string + "\n"                    string=""                if a ==  0:                    if x != "[":                        string=" %s"% x                        a+=1                else:                    string+=x                            print "-" * 80                                if command == "download_directory":                        fail=0            default_dir=os.getcwd()            print "Write quit to return to the command line"            target_dir=raw_input("Enter the directory in which you want to download: ")            if target_dir == "quit":                fail=1            if fail == 0:                s.send("download_directory")                print "Awaiting directory confirmation"                time.sleep(0.3)                s.send(target_dir)                status=s.recv(1024)#server checks to see if it exists                if status == "Directory exists":                    print "Directory exists, starting download"                    fail=0                else:                    fail=1            if fail == 0:                if os.path.isdir(target_dir):                    try:                        shutil.rmtree(target_dir)                    except Exception:                        print "ERROR OCCURRED"#FIX THIS UP!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                target_dir=target_dir.replace("/","")                os.mkdir(target_dir)                time.sleep(0.2)                now=datetime.datetime.now()#speed                start_second=now.second                start_minute=now.minute                                try:                    os.chdir(target_dir)                except(OSError):                    print "Cant change directory"                main_dir=os.getcwd()                while True:                                        status=s.recv(1024)                                                            if status == "folder":                        folder_name=s.recv(1024)                        if "\\" in folder_name:                            folder_name=folder_name.replace("\\","-")                                                    if os.path.isdir(folder_name):#CHANGE THIS, IT's FAIRLY USELESS                            pass                        else:                            os.mkdir(folder_name)                        time.sleep(0.2)                        try:                            os.chdir(folder_name)                        except(OSError):                            print "Cant change directory"                                                                        if status == "file":                        fname=s.recv(1024)                        f_size=s.recv(1024)                                                f_size=int(f_size)                        print "Calculating file size of %s"% fname                        d_25=f_size/4                        d_50=f_size/2                        d_75=d_25+d_50                        c_25=0                        c_50=0                        c_75=0                        d_sent=0                        formats=[".jpg",".bmp",".png"]                        image=0                        for form in formats:                            if form in fname:                                image=1                                p=ImageFile.Parser()                                print "Initiating download........"                                while True:                                    data=s.recv(15000)                                    d_sent+=15000                                    if data == "!@File end@!":                                        break                                    p.feed(data)                                    if d_sent >= d_25:                                        if c_25 == 0:                                            print "Download of " + fname + r" 25% complete!"                                            c_25=1                                    if d_sent >= d_50:                                        if c_50 == 0:                                            print "Download of " + fname + r" 50% complete!"                                            c_50=1                                    if d_sent >= d_75:                                        if c_75 == 0:                                            print "Download of " + fname + r" 75% complete!"                                            c_75=1                                fail=0                                try:                                    im=p.close()                                except(IOError):                                    print "Unable to format picture!!!"                                    fail=1                                if fail == 0:                                    im.save(fname)                                                                if image == 0:                            print "Initiating download....."                            data_bank=[]                            thread.start_new_thread(directory_threaded_download,(fname,))                            while True:                                data=s.recv(15000)                                if "!@File end@!" in data:                                    data=data.replace("!@File end@!","")                                    if data != "":                                        data_bank.append(data)                                    data_bank.append("!@File end@!")                                    break                                data_bank.append(data)                                                                d_sent+=15000                                                                if d_sent >= d_25:                                    if c_25 == 0:                                        print "Download of " + fname + r" 25% complete!"                                        c_25=1                                if d_sent >= d_50:                                    if c_50 == 0:                                        print "Download of " + fname + r" 50% complete!"                                        c_50=1                                if d_sent >= d_75:                                    if c_75 == 0:                                        print "Download of " + fname + r" 75% complete!"                                        c_75=1                                                                            while True:                            if d_finish == 1:                                break                        fail=0                        try:                            f=open(fname,"rb")                        except Exception:                            fail=1                        fail=0                        if fail == 0:                            try:                                md5=hashlib.md5(f.read()).hexdigest()                            except(MemoryError):                                print "Memory Error with hash check"                                s.send("0")                                check_md5=s.recv(1024)                                fail=1                            if fail == 0:                                s.send(str(md5))                                check_md5=s.recv(1024)                                if md5 == check_md5:                                    print "Hash check is valid!"                                    print "Downloaded %s successfully!\n"% fname                                else:                                    print "Hash check is invalid!"                                    print "\nDownloaded %s unsuccessful!\n"% fname                            f.close()                                                    try:                            os.chdir(main_dir)                        except(OSError) as e:                            print "Cant change directory"                                                   if status == "Upload complete":                        end=datetime.datetime.now()                        finish_minute=end.minute                        finish_second=end.second                                                if finish_minute > start_minute or finish_minute == start_minute:                            if finish_second < start_second:                                time_second=(60-start_second)+finish_second                                if start_minute > finish_minute:                                    time_minute=(60-start_minute)+finish_minute                                else:                                    time_minute=finish_minute-start_minute                                    if time_minute == 1:                                        time_minute=0                                    if time_second > 60:                                        time_second-=60                                        time_minute+=1                            else:                                time_minute=finish_minute-start_minute                                time_second=finish_second-start_second                                                        else:                            #start minute is larger than finish minute                            #assume it's only 1 hour over                            time_minute=60+(finish_minute-start_minute)                            if start_second > finish_second:                                time_second=(60-start_second)+finish_second                            else:                                time_second=finish_second-start_second                                                        if time_second > 1:                            count_name="seconds"                        else:                            count_name="second"                        if time_minute == 1:                            min_name="minute"                        else:                            min_name="minutes"                                                                                                                print "\nTime taken: %s %s,%s %s\n"% (time_minute,min_name,time_second,count_name)                                                print "Finished downloading %s"% target_dir                        os.chdir(default_dir)                        break                if command == "upload_directory":            skip=0            while True:#loop for getting directory name                fail=0                print "Write quit to return to the command line!"                target_dir=raw_input("Enter the the folder in which you want to upload: ")                                if target_dir == "quit":                    skip=1                    break                                    default_dir=os.getcwd()                try:                    os.chdir(target_dir) #changing directory so it can then search for files to upload                except(OSError):                    print "ERROR: Unable to change directory"                    fail=1                if fail == 0:                    break # it successfully changed directory                        if skip == 0:                default2_dir=os.getcwd()                s.send("upload_directory")#directory exists, directory changed                now=datetime.datetime.now()#speed                start_second=now.second                start_minute=now.minute                time.sleep(0.2)                                #send first filename or initial file                s.send(target_dir)#it sends the first folder name                rootDir="."                                                for dirName, subdirList, fileList in os.walk(rootDir, topdown=False):                    for fname in fileList:#it sees  if the directory is still the same , otherwise it will send a new dir to server                        if dirName != ".":                            len_dirName=len(dirName)                            folder_names=dirName[2:len_dirName]                            new_dirname="%s\%s"% (os.getcwd(),folder_names)                            new_dir="%s"% os.getcwd()                                                        while True:                                x=1                                matchObj=re.search(r"(.*)\.*",folder_names)                                if matchObj:                                    try:                                        while True:                                            folder_name=matchObj.group(x)                                            new_dir=new_dir + "\\" + folder_name#its adding " before bingo                                            x+=1                                            time.sleep(0.2)                                            s.send("folder")#telling the server its a folder, not the file                                            time.sleep(0.2)                                            s.send(folder_name)                                            status_f=s.recv(1024)                                            if status_f == "finished with folder":                                                pass                                            else:                                                print "ERROR: Client and server out of sync"                                                                                                                                                                                if new_dir == new_dirname:#new_dir should equal where the file was located                                                break                                                                                    try:                                            os.chdir(new_dir)#its not the correct directory                                            time.sleep(0.5)                                        except(OSError):                                            print "ERROR: Cant change directory"                                            time.sleep(2)                                            sys.exit()                                                                                except(IndexError):                                        print "ERROR:NEW_DIR DOESNT EQUAL NEW_DIRNAME!"                                        raw_input("")                                        sys.exit()                                                                                                            else:                                    print "ERROR: THERE WAS NO MATCH!!!!"                                    break                                break # its finished matching and changing directory                                                                                    try:                            f=open(fname,"rb")                        except(IOError) as e:                            print "ERROR:FILE ERROR"                            time.sleep(2)                            sys.exit()                                                                    s.send("file")                        time.sleep(0.4)                        s.send(fname)                        f_size=0                        print "Calculating file size of %s"% fname                        while True:                            data=f.read(1024)                            if data == "":                                break                            else:                                f_size+=1024                                                    f.close()                        d_25=f_size/4                        d_50=f_size/2                        d_75=d_25+d_50                        c_25=0                        c_50=0                        c_75=0                        fail=0                        try:                            f=open(fname,"rb")                        except(IOError) as e:                            print "ERROR:FILE ERROR"                            s.send("stop")                            fail=1                        if fail == 0:                            print "Initiating upload of %s"% fname                            d_sent=0                            while True:                                data=f.read(5000)                                if data == "":                                                                    time.sleep(0.3)                                    s.send("stop")                                    break                                d_sent+=5000                                s.send(data)                                                                if d_sent >= d_25:                                    if c_25 == 0:                                        print "Upload of " + fname + r" 25% complete!"                                        c_25=1                                if d_sent >= d_50:                                    if c_50 == 0:                                        print "Upload of " + fname + r" 50% complete!"                                        c_50=1                                if d_sent >= d_75:                                    if c_75 == 0:                                        print "Upload of " + fname + r" 75% complete!"                                        c_75=1                                                                f=open(fname,"rb")                        fail=0                        try:                            md5=hashlib.md5(f.read()).hexdigest()                        except(MemoryError):                            print "Memory Error with hash check!"                            fail=1                        if fail == 0:                            time.sleep(0.5)                            s.send(str(md5))                                                        check_md5=s.recv(1024)                            if md5 == check_md5:                                print "Hash check is valid!"                                print "Uploaded %s successfully!\n"% fname                            else:                                print "Hash check is invalid!"                                print "\nUploaded %s unsuccessful!\n"% fname                        if fail == 1:                            s.send("0")                            s.recv(1024)                                                    os.chdir(default2_dir)                        time.sleep(0.5)                                        #done uploading                end=datetime.datetime.now()                finish_minute=end.minute                finish_second=end.second                                if finish_minute > start_minute or finish_minute == start_minute:                    if finish_second < start_second:                        time_second=(60-start_second)+finish_second                        if start_minute > finish_minute:                            time_minute=(60-start_minute)+finish_minute                        else:                            time_minute=finish_minute-start_minute                            if time_minute == 1:                                time_minute=0                            if time_second > 60:                                time_second-=60                                time_minute+=1                    else:                        time_minute=finish_minute-start_minute                        time_second=finish_second-start_second                                        else:                    #start minute is larger than finish minute                    #assume it's only 1 hour over                    time_minute=60+(finish_minute-start_minute)                    if start_second > finish_second:                        time_second=(60-start_second)+finish_second                    else:                        time_second=finish_second-start_second                if time_second > 1:                    count_name="seconds"                else:                    count_name="second"                if time_minute == 1:                    min_name="minute"                else:                    min_name="minutes"                print "\nTime taken: %s %s,%s %s\n"% (time_minute,min_name,time_second,count_name)                print "Uploaded %s successfully"% target_dir                time.sleep(0.5)                s.send("Upload complete")                os.chdir(default_dir)                                                                if command == "download":                s.send("download")                f_name=raw_input("Enter the file in which you want to download, with the file identifier at the end e.g. test.exe: ")                now=datetime.datetime.now()#speed                start_second=now.second                start_minute=now.minute                s.send(f_name)                status=s.recv(1024)                                if status != "Sending":                    print "File doesnt exist!"                if status == "Sending":                    f_size=s.recv(1024)                    limit=int(f_size)                    limit2=0                    data25=limit/4                    data50=limit/2                    data75=data25+data50                    d25=0                    d50=0                    d75=0                    formats=[".jpg",".bmp",".png"]                    image=0                    for form in formats:                        if form in f_name:                            image=1                            p=ImageFile.Parser()                            while True:                                data=s.recv(5000)                                limit2+=5000                                                                if data == "File end":                                    break                                                                if d25 == 0:                                    if limit2 >= data25:                                        print "Download 25 percent complete!"                                        d25=1                                if d50 == 0:                                    if limit2 >= data50:                                        print "Download 50 percent complete!"                                        d50=1                                if d75 == 0:                                    if limit2 >= data75:                                        print "Download 75 percent complete!"                                        d75=1                                p.feed(data)                            fail=0                            try:                                im=p.close()                            except(IOError):                                print "Unable to format picture!!!"                                fail=1                                                        if fail == 0:                                im.save(f_name)                                                if image == 0:                        data_bank=[]                        thread.start_new_thread(threaded_download,(f_name,))                        while True:                            data=s.recv(5000)                            limit2+=5000                            if "File end" in data:                                data=data.replace("File end","")#because occasionally file end is with something else                                if data != "":#in the case that something else was with that string                                    data_bank.append(data)                                data_bank.append("stop")                                break                                                        if d25 == 0:                                if d50 == 0:                                    if d75 == 0:                                        if limit2 > data25:                                            print "Download 25 percent complete!"                                            d25=1                            if d50 == 0:                                if d75 == 0:                                    if limit2 > data50:                                        print "Download 50 percent complete!"                                        d50=1                            if d75 == 0:                                if limit2 > data75:                                    print "Download 75 percent complete!"                                    d75=1                            data_bank.append(data)                    while True:#CHANGE, it's waiting for the go ahead from the function to continue                        if d_finish == 1:                            break                        else:                            pass                                        end=datetime.datetime.now()                    finish_minute=end.minute                    finish_second=end.second                    if finish_minute > start_minute or finish_minute == start_minute:                        if finish_second < start_second:                            time_second=(60-start_second)+finish_second                            if start_minute > finish_minute:                                time_minute=(60-start_minute)+finish_minute                            else:                                time_minute=finish_minute-start_minute                                if time_minute == 1:                                    time_minute=0                                if time_second > 60:                                    time_second-=60                                    time_minute+=1                        else:                            time_minute=finish_minute-start_minute                            time_second=finish_second-start_second                      else:                        #start minute is larger than finish minute                        #assume it's only 1 hour over                        time_minute=60+(finish_minute-start_minute)                        if start_second > finish_second:                            time_second=(60-start_second)+finish_second                        else:                            time_second=finish_second-start_second                                if time_second > 1:                        count_name="seconds"                    else:                        count_name="second"                    if time_minute == 1:                        min_name="minute"                    else:                        min_name="minutes"                                        print "\nTime taken: %s %s,%s %s\n"% (time_minute,min_name,time_second,count_name)                    f=open(f_name,"rb")                    fail=0                    try:                        md5=hashlib.md5(f.read()).hexdigest()                    except(MemoryError):                        print "Memory error with hash check!"                        fail=1                    if fail == 0:                        s.send(str(md5))                        check_md5=s.recv(1024)                        if md5 == check_md5:                            print "Hash check is valid!"                            print "\nFile download successful!\n"                            print "Downloaded %s successfully!\n"% f_name                        else:                            print "Hash check is invalid!"                            print "\nFile download unsuccessful!\n"                    else:                        s.send("0")                        s.recv(1024)                                if command == "upload":            fail=0            f_name=raw_input("Enter the file name in which you want to upload, with the file identifier at the end e.g. test.exe: ")            try:                f=open(f_name,"rb")            except(IOError,TypeError):                print "Error: No such file"                fail=1            if fail == 0:                now=datetime.datetime.now()#speed                start_second=now.second                start_minute=now.minute                print "Please wait...."                limit=0                while True:                    da=f.read(1024)                    if da != "":                        limit+=1024                    if da == "":                        f.close()                        break                f=open(f_name,"rb")                s.send("upload")                time.sleep(0.5)                s.send(f_name)                limit2=0                data25=limit/4                data50=limit/2                data75=data50+data25                d25=0                d50=0                d75=0                while True:                    data=0                    data=f.read(1024)                    if d25 == 0:                        if d50 == 0:                            if d75 == 0:                                if limit2 > data25:                                    print "Upload 25 percent complete!"                                    d25=1                    if d50 == 0:                        if d75 == 0:                            if limit2 > data50:                                print "Upload 50 percent complete!"                                d50=1                    if d75 == 0:                                if limit2 > data75:                            print "Upload 75 percent complete!"                            d75=1                    if data == "":                        f.close()                        time.sleep(0.2)                        s.send("File end")                        break                    s.send(data)                    limit2+=1024                                    end=datetime.datetime.now()                finish_minute=end.minute                finish_second=end.second                if finish_minute > start_minute or finish_minute == start_minute:                    if finish_second < start_second:                        time_second=(60-start_second)+finish_second                        if start_minute > finish_minute:                            time_minute=(60-start_minute)+finish_minute                        else:                            time_minute=finish_minute-start_minute                            if time_minute == 1:                                time_minute=0                            if time_second > 60:                                time_second-=60                                time_minute+=1                    else:                        time_minute=finish_minute-start_minute                        time_second=finish_second-start_second                            else:                    #start minute is larger than finish minute                    #assume it's only 1 hour over                    time_minute=60+(finish_minute-start_minute)                    if start_second > finish_second:                        time_second=(60-start_second)+finish_second                    else:                        time_second=finish_second-start_second                            if time_second > 1:                    count_name="seconds"                else:                    count_name="second"                if time_minute == 1:                    min_name="minute"                else:                    min_name="minutes"                                    print "\nTime taken: %s %s,%s %s\n"% (time_minute,min_name,time_second,count_name)                response=s.recv(1024)                f=open(f_name,"rb")                fail=0                try:                    md5=hashlib.md5(f.read()).hexdigest()                except(MemoryError):                    print "Memory Error with hash check!"                    fail=1                if fail == 0:                    s.send(str(md5))                    check_md5=s.recv(1024)                    if md5 == check_md5:                        print "Hash check is valid!"                        print "\nFile upload successful!\n"                    else:                        print "Hash check is invalid!"                        print "\nFile upload unsuccessful!\n"                else:                    s.send("0")                    s.recv(1024)                                                        if command == "delete":            s.send("delete")            fail=0            f_name=""            while f_name == "":                f_name=raw_input("Enter the file in which you want to delete , with the file identifier at the end e.g. test.exe: ")            if "." in f_name:                s.send("file")            else:                s.send("folder")                       s.send(f_name)            status=s.recv(1024)            if status == "SERVER: Unable to delete file":                print "\nUnable to delete: %s\n"% f_name            if status == "SERVER: Successfully deleted file":                print "\nSuccessfully deleted: %s\n"% f_name        if command == "exit":            s.send("exit")            time.sleep(0.2)            sys.exit()#----------------------------------------------------------------------------------------------------FILE UPDATER----------------------------------------------------------------#Client updater network variables#u_host="127.0.0.1"u_host="192.168.0.199"u_port=27999print "Checking file cloud version!"print "\n Connecting to file cloud updater...................\n"fail=0try:    s.connect((u_host,u_port))except(socket.error) as e:    print "Unable to connect to the file cloud updater!"    fail=1if fail == 0:    s.send("check")#two modes, check and update    s.send("asddd")#random bs so the code will continue!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!FIND THE ACTUAL PROBLEM!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!    #connected to file  cloud updater    #send the os    time.sleep(0.5)    s.send("windows")    try:        f=open("file_cloud_client.py","rb")    except (IOError):        print "Unable to check version!"        fail=1    if fail == 0:        md5=hashlib.md5(f.read()).hexdigest()        check_md5=s.recv(1024)        s.send(str(md5))        f.close()        if md5 == check_md5:#same versions            print "File cloud up-to-date!"        else:            print "File cloud out of date!"            choice=raw_input("Would you like to update? ")                        if choice.lower() == "yes":                f=open("file_cloud_client.py","wb")                s.send("yes")                while True:                    data=s.recv(1024)                    if data == "stop":                        f.close()                        break                    f.write(data)                raw_input("Please restart the application!")                sys.exit()                                #download new copy                            else:                print "\nIf the program runs slow or doesnt work, it may be due to it being out of date!\n"                s.send("no")                    s.close()        time.sleep(0.5)s=socket.socket()print "-"*80 + "\n"while True:    user_name=raw_input("Enter the user name in which you are logging on with : ")    user_name=user_name.upper()    if user_name != "":        breakprint "\n" + "-"*80 + "\n"#CONNECT TO THE FILE MANAGER-----------------------------------------------------------------FILE MANAGER---------------------------------------------------------------m_host="192.168.0.199"m_port=25777print "Establishing connection with the file manager........"try:    s.connect((m_host,m_port))except(socket.error) as e:    print "Error: Unable to connect to file manager!"    print e    raw_input("Press ENTER to exit....")    sys.exit()print "Successfully connected to the file manager!"s.send("Initiate")time.sleep(0.3)s.send(user_name)last_login=s.recv(1024)server_uptime=s.recv(1024)port=s.recv(1024)port=int(port)s.send("exit")time.sleep(0.2)s.close()time.sleep(1)#Wait for the manager to boot up the server#CONNECT TO THE FILE SERVERs=socket.socket()#-------------------------------------------------------------------------------------------------FILE SERVER-----------------------------------------------------------------------------------------------print "\nEstablishing connection with the file server........."try:    s.connect((host,port))except(socket.error) as e:    print "Error: Unable to connect to the file server!"    print e    raw_input("Press ENTER to exit.....")    sys.exit()print "Successfully connected to the file server!\n"print "If you dont send a command over a 5 minute interval the connection will be terminated!"s.send("file")s_mes=s.recv(1024)s.send(user_name)status=s.recv(1024)if status == "Directory available":    uptime_approval=s.recv(1024)    try:        user_input()    except(socket.error):        print "Server closed connection due to inactivity"        raw_input("Press ENTER to exit..............")        sys.exit()    if status != "Directory available":    #this is where the directory doesnt exist    s.send("yes")    response=s.recv(1024)    if response == "Unable to make directory!":        #server error created directory        print "Server side error occured!"        raw_input("Press ENTER to exit........")        sys.exit()    else:        uptime_approval=s.recv(1024)        if uptime_approval != "DECLINED":# it sends DECLINED if the user isnt an admin            print "\nServer uptime: %s\n"% server_uptime        #directory created         try:            user_input()        except(socket.error) as e:	    print e#to find the bug that occurs when downloading massive directories            print "Server closed connection due to inactivity"            raw_input("Press ENTER to exit..............")            sys.exit()